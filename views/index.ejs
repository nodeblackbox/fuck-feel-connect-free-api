<!DOCTYPE html>
<html>
  <head>
    <title>Masseuse Control Panel</title>
    <!-- Include Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      function sendCommand(command) {
        socket.emit("sendCommand", command);
      }

      document.addEventListener("DOMContentLoaded", () => {
        const intensityMap = {
          Off: 0,
          Low: 2,
          LowMedium: 4,
          Medium: 6,
          MediumHigh: 8,
          High: 9,
          UltraHigh: 9
        };

        const container = document.getElementById("intensity-levels-container");
        Object.keys(intensityMap).forEach((level, index) => {
          const levelDiv = document.createElement("div");
          levelDiv.className = "intensity-level";
          levelDiv.innerHTML = `
            <span>Level ${index + 1}: ${level}</span>
            <input id="duration-level-${index}" type="number" min="1" max="60" value="5">
            <select id="intensity-level-${index}">
                ${Object.keys(intensityMap).map(intensity => `<option value="${intensity}">${intensity}</option>`).join("")}
            </select>
            <button onclick="testIntensity('${level}', document.getElementById('duration-level-${index}').value)" class="button">Test</button>
          `;
          container.appendChild(levelDiv);
        });
      });
    </script>
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    
    <style>
      body {
        font-family: "Poppins", sans-serif;
        background-color: #f4f7f6;
        margin: 0;
        padding: 20px;
        color: #333;
      }
      h1 {
        color: #333;
        text-align: center;
        margin-bottom: 20px;
      }
      .button {
        background-color: #4caf50; /* Green */
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
      }
      .button:hover {
        background-color: #45a049;
      }
      .control-panel {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
      }
      .log,
      .status {
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
      }
      .status {
        font-weight: 600;
      }
      .intensity-level {
        background: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .intensity-level select,
      .intensity-level input {
        padding: 10px;
        margin-left: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-family: "Poppins", sans-serif;
      }
    </style>
  </head>
  <body>
    <h1>Bluetooth Sex Toy Control Panel</h1>
    <div class="control-panel">
        <button onclick="sendCommand('start')" class="button">Start Massage</button>
        <button onclick="sendCommand('stop')" class="button">Stop Massage</button>
        <button id="connect" class="button">Connect to Device</button>
        <button id="sendPayload" class="button">Send Custom Payload</button>
    </div>
    <div class="log" id="log">Log:</div>
    <div class="status" id="status">Status:</div>
    <div id="intensity-levels-container"></div>
    <script>
      // Script begins here
      document.addEventListener("DOMContentLoaded", () => {
        // Mapping of intensity levels to numeric values
        const intensityMap = {
          Off: 0,
          Low: 2,
          LowMedium: 4,
          Medium: 6,
          MediumHigh: 8,
          High: 9,
          UltraHigh: 9
        };

        // Dynamically create UI elements for testing different intensity levels
        const container = document.getElementById("intensity-levels-container");
        Object.keys(intensityMap).forEach((level, index) => {
          const levelDiv = document.createElement("div");
          levelDiv.className = "flex items-center mb-4";
          levelDiv.innerHTML = `
       
    `;
          container.appendChild(levelDiv);
        });
      });

      const logElement = document.getElementById("log");
      const statusElement = document.getElementById("status");

      function addToLog(message) {
        const entry = document.createElement("div");
        entry.textContent = message;
        logElement.appendChild(entry);
        logElement.scrollTop = logElement.scrollHeight;
      }

      function updateStatus(message) {
        statusElement.textContent = message;
      }

      function testIntensity(level, duration) {
        const intensityMap = {
          Off: 0,
          Low: 2,
          LowMedium: 4,
          Medium: 6,
          MediumHigh: 8,
          High: 9,
          UltraHigh: 9
        };

        if (intensityMap.hasOwnProperty(level)) {
          // Construct a command string or object to send
          const command = {
            action: "setIntensity",
            intensity: intensityMap[level],
            duration: duration
          };

          // Log the command to the console for debugging
          console.log(
            `Sending command: Intensity '${level}' (${intensityMap[level]}) set for ${duration} seconds.`
          );

          // Send the command via Socket.IO
          socket.emit("sendCommand", command);

          // Optionally, simulate turning off the device after the set duration
          setTimeout(() => {
            console.log("Simulated device turn off after the duration.");
            // You could also send a command to turn off the device here
          }, duration * 1000);
        } else {
          console.error(`Intensity level '${level}' is not defined.`);
        }
      }
    </script>
  </body>
</html>
