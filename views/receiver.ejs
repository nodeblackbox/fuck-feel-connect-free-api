<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Receiver Panel</title>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const intensityMapConverter = {
        0: "Off",
        1: "Low",
        2: "Low",
        3: "LowMedium",
        4: "LowMedium",
        5: "Medium",
        6: "Medium",
        7: "High",
        8: "High",
        9: "UltraHigh"
      };

      document.addEventListener("DOMContentLoaded", () => {
        const socket = io();
        const commandsLogDiv = document.getElementById("commandsLog");
        const connectionStatusDiv = document.getElementById("connectionStatus");

        socket.on("connect", () => {
          console.log("Socket connected");
          connectionStatusDiv.textContent = "Socket connected.";
        });

        socket.on("disconnect", () => {
          console.log("Socket disconnected");
          connectionStatusDiv.textContent =
            "Socket disconnected. Trying to reconnect...";
          socket.connect();
        });

        socket.on("receiveCommand", (command) => {
          console.log("Command received:", command);
          displayCommand(command);
          console.log("Command received intensity:", command.intensity);
          console.log("Command received duration:", command.duration);

          // Corrected line: use the intensity from the command object to get the corresponding intensity level
          testIntensity(intensityMapConverter[command.intensity], 1);
        });

        function displayCommand(command) {
          let commandStr =
            typeof command === "object"
              ? JSON.stringify(command, null, 2)
              : command;
          const commandDiv = document.createElement("div");
          commandDiv.textContent = commandStr;
          commandsLogDiv.appendChild(commandDiv);
        }
      });
    </script>
  </head>
  <body>
    <h1>Waiting for Commands...</h1>
    <div id="connectionStatus">Connecting to socket...</div>
    <div id="commandsLog"></div>
    <button id="connect">Connect to Device</button>
    <button id="sendPayload">Send Custom Payload</button>
    <div class="log" id="log"></div>
    <div class="status" id="status"></div>
    <div id="deviceInfo"></div>
    <div id="intensity-levels-container" class="container"></div>

    <script>
      // Device and service initialization
      let device, server;
      const logElement = document.getElementById("log");
      const statusElement = document.getElementById("status");

      function addToLog(message) {
        const entry = document.createElement("div");
        entry.textContent = message;
        logElement.appendChild(entry);
        logElement.scrollTop = logElement.scrollHeight;
      }

      function updateStatus(message) {
        statusElement.textContent = message;
      }

      // Connect to the device and initialize services with error handling
      async function connectToDeviceAndInitializeServices() {
        try {
          updateStatus("Requesting Bluetooth Device...");
          device = await navigator.bluetooth.requestDevice({
            acceptAllDevices: true,
            optionalServices: [
              "a0d70001-4c16-4ba7-977a-d394920e13a3",
              "88f82580-0000-01e6-aace-0002a5d5c51b",
              "00001900-0000-1000-8000-00805f9b34fb",
              65504,
              65504,
              65504,
              65504,
              44544,
              "f000bb03-0451-4000-b000-000000000000",
              65282,
              65024,
              5120,
              6159,
              5632,
              "battery_service"
            ]
          });

          server = await device.gatt.connect();
          addToLog(`Connected to ${device.name}`);
          updateStatus("Discovering Services...");

          const services = await server.getPrimaryServices();
          services.forEach(async (service) => {
            addToLog(`Discovered service: ${service.uuid}`);
            const characteristics = await service.getCharacteristics();
            characteristics.forEach((characteristic) => {
              addToLog(`Characteristic: ${characteristic.uuid}`);
            });
          });
          updateStatus("Service discovery complete.");
        } catch (error) {
          addToLog(`Connection failed: ${error}`);
          updateStatus("Failed to connect.");
        }
      }

      function testIntensity(level, duration) {
        const intensityMap = {
          Off: 0,
          Low: 2,
          LowMedium: 4,
          Medium: 6,
          MediumHigh: 8,
          High: 9,
          UltraHigh: 9
        };

        if (intensityMap.hasOwnProperty(level)) {
          const intensityValue = intensityMap[level];
          const payload = new Uint8Array([1, intensityValue]);
          sendCustomPayload(payload)
            .then(() => {
              console.log(`Intensity '${level}' set for ${duration} seconds.`);
              setTimeout(() => {
                const offPayload = new Uint8Array([1, 0]);
                sendCustomPayload(offPayload);
                console.log("Device turned off after the duration.");
              }, duration * 1000);
            })
            .catch((error) => {
              console.error("Failed to send intensity command", error);
            });
        } else {
          console.error(`Intensity level '${level}' is not defined.`);
        }
      }

      // for sending custom payload to the device, now accepts an argument for dynamic payloads
      async function sendCustomPayload(payload) {
        const serviceUuid = "00001900-0000-1000-8000-00805f9b34fb"; // Use the actual service UUID
        const characteristicUuid = "00001902-0000-1000-8000-00805f9b34fb"; // Use the actual characteristic UUID

        try {
          updateStatus("Sending custom payload...");
          const service = await server.getPrimaryService(serviceUuid);
          const characteristic = await service.getCharacteristic(
            characteristicUuid
          );
          await characteristic.writeValue(payload);
          addToLog("Custom payload sent successfully.");
          updateStatus("Payload sent.");
        } catch (error) {
          addToLog(`Sending custom payload failed: ${error}`);
          updateStatus("Failed to send payload.");
        }
      }

      // Event listeners for user interaction
      document
        .getElementById("connect")
        .addEventListener("click", connectToDeviceAndInitializeServices);
      document.getElementById("sendPayload").addEventListener("click", () => {
        testIntensity("Medium", 1); // call with default values
      });
    </script>
  </body>
</html>
